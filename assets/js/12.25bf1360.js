(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{332:function(t,e,a){"use strict";a.r(e);var r=a(33),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"_2019-11-15"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2019-11-15"}},[t._v("#")]),t._v(" 2019-11-15")]),t._v(" "),a("h2",{attrs:{id:"接入paypal-rest-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#接入paypal-rest-api"}},[t._v("#")]),t._v(" 接入paypal rest api")]),t._v(" "),a("p",[t._v("之前接入的api是expressCheckout，年代久远，所以试一试重新接入它推荐的api。")]),t._v(" "),a("p",[t._v("优点：")]),t._v(" "),a("ul",[a("li",[t._v("首先是文档要清晰一点，所有的req和resp都有示例，在写结构体的时候照着抄就完事了；")]),t._v(" "),a("li",[t._v("webhooks还有测试接口，在后台直接点就可以模拟各种消息的发送，非常好调；对比之前的recurring payment，传不过去用户信息，只能写订单号和userId的映射表，而且要在支付完成之后才能拿到订单号。当用户没有跳转回支付成功页面，只能去IPN消息里面捞信息，现在这个，在创建订阅的时候就拿得到订单信息，并且可以传我们的账号系统中的userId和email过去，在任何地方都能查询到；")]),t._v(" "),a("li",[t._v("最好用的一点是"),a("code",[t._v("HATEOAS links")]),t._v("，会返回相应信息的查询url，只需要在request中带上正确的authorization，就可以再次查询到，方便在，存log的时候不需要整个都存下来，只要存对应links，然后再重新去查一遍，就可以拿到完整信息，适用与debug和情报站的相关功能；")])]),t._v(" "),a("p",[t._v("缺点：")]),t._v(" "),a("ul",[a("li",[t._v("不可复用之前的代码")]),t._v(" "),a("li",[t._v("webhook消息验证有点麻烦\n"),a("img",{attrs:{src:"/note/2019-12-17-13-59-34.png",alt:""}}),t._v("\n多个信息需要从消息的header中捞出来，加上原来的body内容，再传给验证api，根据返回值判断验证是否正确")])])])}),[],!1,null,null,null);e.default=s.exports}}]);