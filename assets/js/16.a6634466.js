(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{336:function(t,v,_){"use strict";_.r(v);var i=_(33),e=Object(i.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h1",{attrs:{id:"git"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#git"}},[t._v("#")]),t._v(" Git")]),t._v(" "),_("p"),_("div",{staticClass:"table-of-contents"},[_("ul",[_("li",[_("a",{attrs:{href:"#基本流程"}},[t._v("基本流程")])]),_("li",[_("a",{attrs:{href:"#分支管理"}},[t._v("分支管理")])])])]),_("p"),t._v(" "),_("p",[t._v("git分成三个区：工作区，暂存区，版本库"),_("br"),t._v(" "),_("img",{attrs:{src:"/note/2019-06-20-13-11-29.png",alt:""}})]),t._v(" "),_("ul",[_("li",[t._v("左侧是工作区，右侧是版本库，index部分是暂存区，master是master分支的目录树")]),t._v(" "),_("li",[t._v("objects区域是git的对象库，包含了创建的各种对象和内容")])]),t._v(" "),_("ol",[_("li",[t._v("当在工作区修改/新增文件，执行"),_("code",[t._v("git add")]),t._v("，工作区修改/新增的文件内容写入对象库中的一个新的对象，该对象id被记录在暂存区的文件索引中，同时，暂存区的目录树会被更新")]),t._v(" "),_("li",[_("code",[t._v("git commit")]),t._v("时，暂存区目录树写入版本库中，master分支做相应更新。")]),t._v(" "),_("li",[_("code",[t._v("git reset HEAD")]),t._v("时，暂存区的目录树会被重写，被master分支指向的目录树代替，工作区不受影响")]),t._v(" "),_("li",[_("code",[t._v("git rm --cached <file>")]),t._v("会直接从暂存区删除文件，工作区不改变")]),t._v(" "),_("li",[_("code",[t._v("git checkout . / git checkout -- <file>")]),t._v("，会用暂存区全部/指定文件替换工作区文件，会清除工作区中未添加到暂存区的改动")]),t._v(" "),_("li",[_("code",[t._v("git checkout HEAD / git checkout HEAD <file>")]),t._v("，会用head指向master分支中的全部/部分文件替换暂存区和工作区中的文件")])]),t._v(" "),_("h2",{attrs:{id:"基本流程"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#基本流程"}},[t._v("#")]),t._v(" 基本流程")]),t._v(" "),_("p",[t._v("一般流程是")]),t._v(" "),_("ol",[_("li",[t._v("工作区进行开发，代码修改了/增加，然后"),_("code",[t._v("git add .")]),t._v("到暂存区，暂存区可以保留一份修改")]),t._v(" "),_("li",[t._v("如果对工作区代码不满意，回退回暂存区版本"),_("code",[t._v("git checkout .")])]),t._v(" "),_("li",[t._v("代码没有问题了，也添加到暂存区，则"),_("code",[t._v("git commit -m 'YOURCOMMIT'")]),t._v("，将暂存区的代码提交到仓库区")]),t._v(" "),_("li",[t._v("将本地仓库区代码推到远程仓库，"),_("code",[t._v("git push")]),t._v("。或者可以先"),_("code",[t._v("git fetch")]),t._v("，拉取远程仓库的分支，然后"),_("code",[t._v("git pull [remote] [branch]")]),t._v("拉取远程分支并与本地合并，然后解决冲突后再"),_("code",[t._v("git push")])])]),t._v(" "),_("h2",{attrs:{id:"分支管理"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#分支管理"}},[t._v("#")]),t._v(" 分支管理")]),t._v(" "),_("ol",[_("li",[t._v("创建分支：")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git branch BRANCHNAME")]),t._v("创建新分支但是停留在当前分支")]),t._v(" "),_("li",[_("code",[t._v("git checkout -b BRANCHNAME")]),t._v("创建并切换到新的分支")])]),t._v(" "),_("ol",{attrs:{start:"2"}},[_("li",[t._v("切换分支："),_("code",[t._v("git checkout BRANCHNAME")])]),t._v(" "),_("li",[t._v("查看分支")])]),t._v(" "),_("ul",[_("li",[t._v("本地分支列表："),_("code",[t._v("git branch")])]),t._v(" "),_("li",[t._v("远程分支："),_("code",[t._v("git branch -r")])]),t._v(" "),_("li",[t._v("所有分支："),_("code",[t._v("git branch -a")])])]),t._v(" "),_("ol",{attrs:{start:"4"}},[_("li",[t._v("将本地分支推到远端仓库："),_("code",[t._v("git push REMOTE LOCALBRANCHNAME")])]),t._v(" "),_("li",[t._v("删除")])]),t._v(" "),_("ul",[_("li",[t._v("本地分支"),_("code",[t._v("git branch -d BRANCHNAME")])]),t._v(" "),_("li",[t._v("远端分支"),_("code",[t._v("git branch -dr REMOTE/BRANCHNAME")])])]),t._v(" "),_("ol",{attrs:{start:"6"}},[_("li",[t._v("合并分支")])]),t._v(" "),_("ul",[_("li",[_("code",[t._v("git merge BRANCHNAME")]),t._v(" 合并指定分支到当前分支")]),t._v(" "),_("li",[_("code",[t._v("git cherry-pick COMMITID")]),t._v(" 选择一个commit，合并到当前分支（这个貌似比较少用到）")])])])}),[],!1,null,null,null);v.default=e.exports}}]);