(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{337:function(t,a,s){"use strict";s.r(a);var n=s(33),e=Object(n.a)({},(function(){var t=this,a=t.$createElement,s=t._self._c||a;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"golang"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#golang"}},[t._v("#")]),t._v(" Golang")]),t._v(" "),s("p"),s("div",{staticClass:"table-of-contents"},[s("ul",[s("li",[s("a",{attrs:{href:"#数组和切片关系"}},[t._v("数组和切片关系")])]),s("li",[s("a",{attrs:{href:"#切片作为形参"}},[t._v("切片作为形参")])]),s("li",[s("a",{attrs:{href:"#切片扩容方式"}},[t._v("切片扩容方式")])]),s("li",[s("a",{attrs:{href:"#interface"}},[t._v("interface")]),s("ul",[s("li",[s("a",{attrs:{href:"#底层结构"}},[t._v("底层结构")])])])])])]),s("p"),t._v(" "),s("h2",{attrs:{id:"数组和切片关系"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#数组和切片关系"}},[t._v("#")]),t._v(" 数组和切片关系")]),t._v(" "),s("ul",[s("li",[t._v("数组"),s("br"),t._v("\n是一段连续的内存，定长，且长度不能更改，导致"),s("code",[t._v("[3]int, [4]int")]),t._v("是不同类型，所以使用很少")]),t._v(" "),s("li",[t._v("切片"),s("br"),t._v("\n实际上是个结构体")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" slice "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("cap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),t._v("\n  array unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("所以切片是包含指向底层数组的指针。同时，底层数组也可以被其他切片引用，因此修改底层数组会影响到引用它的其他切片。")]),t._v(" "),s("h2",{attrs:{id:"切片作为形参"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#切片作为形参"}},[t._v("#")]),t._v(" 切片作为形参")]),t._v(" "),s("p",[t._v("函数传入切片作为形参到底是值传递还是引用传递？"),s("br"),t._v("\n结论：是值传递")]),t._v(" "),s("h4",{attrs:{id:"原因"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#原因"}},[t._v("#")]),t._v(" 原因")]),t._v(" "),s("ul",[s("li",[t._v("切片是个数组片段的描述，包含指向数组的指针，片段长度，容量，也就是说，它也可以看作是个结构体，成员是len，cap和数组指针。")]),t._v(" "),s("li",[t._v("如果用原来切片新建一个切片的话，是不会复制底层数组的，只会改变指针的位置。")]),t._v(" "),s("li",[t._v("当切片作为参数传入函数中时，应该是值传递，但是底层的数组是指向同一个数组的片段，所以直接通过索引改变底层数组的元素是会影响到实参，而获取底层数组元素的值后直接更改值，是不会影响到实参")])]),t._v(" "),s("h2",{attrs:{id:"切片扩容方式"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#切片扩容方式"}},[t._v("#")]),t._v(" 切片扩容方式")]),t._v(" "),s("p",[t._v("切片append新的元素之后大于原来底层数组的容量时，会进行扩容。此时切片会迁移到新的内存地址，底层数组长度增加，同时为了预防再次append，增加的容量会有一定规律："),s("br"),t._v("\n网上的："),s("code",[t._v("当原 slice 容量小于 1024 的时候，新 slice 容量变成原来的 2 倍；原 slice 容量超过 1024，新 slice 容量变成原来的1.25倍。")]),s("br"),t._v("\n这个是不准确的，查看append的内部调用，容量不够时会调用growslice")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("growslice")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("et "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_type"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" old slice"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("cap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" slice "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ……")]),t._v("\n    newcap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" old"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("cap")]),t._v("\n\tdoublecap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" newcap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" newcap\n\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("cap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" doublecap "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\tnewcap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("cap")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" old"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("len")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1024")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tnewcap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" doublecap\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("else")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" newcap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("cap")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tnewcap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" newcap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v("\n\t\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ……")]),t._v("\n\t\n\tcapmem "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("roundupsize")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("uintptr")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("newcap"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" ptrSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\tnewcap "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("int")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("capmem "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" ptrSize"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("可以看到:")]),t._v(" "),s("ul",[s("li",[t._v("当增加之后的新容量的两倍a大于就容量的两倍b时，会设定新容量为a")]),t._v(" "),s("li",[t._v("当容量大于1024时，确实会增加到原来的1.25倍，但是在最后，会有roundupsize的调用，进行一次内存对齐，所以会导致新容量>=旧容量的1.25倍")])]),t._v(" "),s("h2",{attrs:{id:"interface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interface"}},[t._v("#")]),t._v(" interface")]),t._v(" "),s("p",[t._v("接口是让go这个静态语言能够支持duck type，来完成动态语言形参不定义类型的写法，是编译器的一种对象推断策略。也是go解决没有范型的一种妥协？"),s("br"),t._v("\n当函数的传入参数是个接口，只需要传入参数能实现接口定义的方法，编译器就可以通过，代码就能正常跑下去。")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("package")]),t._v(" main\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("import")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"fmt"')]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tm "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" Man"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tw "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" Woman"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Wow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("m"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Wow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("w"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" HelloOne "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("interface")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Wow")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("h HelloOne"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("  "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\th"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Man "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" Woman "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Man"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"yo bro!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("func")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("Woman"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("sayHi")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tfmt"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("Println")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hi honey!"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ul",[s("li",[t._v("类型只要实现了接口规定的所有方法，那就认为它实现了接口，而不是像java，需要显式的声明它实现了接口")]),t._v(" "),s("li",[t._v("golang其实在传入到Wow之前，就把实现了接口的变量隐式的转换成了接口变量，所以可以像其他静态类型一样做编译检查")])]),t._v(" "),s("h3",{attrs:{id:"底层结构"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#底层结构"}},[t._v("#")]),t._v(" 底层结构")]),t._v(" "),s("p",[t._v("分成iface和eface，区别在于iface描述的接口包含方法，eface是空接口\n"),s("img",{attrs:{src:"/note/2019-06-21-13-45-55.png",alt:""}})]),t._v(" "),s("h4",{attrs:{id:"iface"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#iface"}},[t._v("#")]),t._v(" iface")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" iface "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ttab  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("itab\n\tdata unsafe"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Pointer\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("内部维护两个指针")]),t._v(" "),s("ol",[s("li",[t._v("tab指向itab实体，表示接口的类型以及赋给这个接口的实体类型")]),t._v(" "),s("li",[t._v("data指向接口具体的值，一般是指向堆内存的指针")])]),t._v(" "),s("h4",{attrs:{id:"itab"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#itab"}},[t._v("#")]),t._v(" itab")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" itab "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tinter  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("interfacetype\n\t_type  "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("_type\n\tlink   "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("itab\n\thash   "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// copy of _type.hash. Used for type switches.")]),t._v("\n\tbad    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// type does not implement interface")]),t._v("\n\tinhash "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("bool")]),t._v("   "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// has this itab been added to hash?")]),t._v("\n\tunused "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\tfun    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// variable sized")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",[s("li",[t._v("_type描述实体的类型，包括内存对齐方式，大小等，实际上是描述go中各种数据类型的结构体")]),t._v(" "),s("li",[t._v("inter描述了接口的类型")]),t._v(" "),s("li",[t._v("fun字段放置了和接口方法对应的具体数据类型的方法地址，实现接口调用方法的动态分派。当给接口赋值时会更新这个表。需要注意的是，fun数组的大小是1，如果接口定义了多个方法时，数组存的是第一个方法的函数指针，其他方法是在它之后的内存中继续存粗，所以是ok的")])]),t._v(" "),s("h4",{attrs:{id:"interfacetype"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#interfacetype"}},[t._v("#")]),t._v(" interfacetype")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" interfacetype "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\ttyp     _type\n\tpkgpath name\n\tmhdr    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("imethod\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("ol",[s("li",[t._v("_type，跟前面的相同")]),t._v(" "),s("li",[t._v("mhdr，表示接口所定义的函数列表")]),t._v(" "),s("li",[t._v("pkgpath，记录定义接口的包名")])]),t._v(" "),s("h4",{attrs:{id:"type"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#type"}},[t._v("#")]),t._v(" _type")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("type")]),t._v(" _type "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型大小")]),t._v("\n\tsize       "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("\n  ptrdata    "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uintptr")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型的 hash 值")]),t._v("\n  hash       "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint32")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型的 flag，和反射相关")]),t._v("\n  tflag      tflag\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 内存对齐相关")]),t._v("\n  align      "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),t._v("\n  fieldalign "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 类型的编号，有bool, slice, struct 等等等等")]),t._v("\n\tkind       "),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("uint8")]),t._v("\n\talg        "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("typeAlg\n\t"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// gc 相关")]),t._v("\n\tgcdata    "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),s("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("byte")]),t._v("\n\tstr       nameOff\n\tptrToThis typeOff\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])])]),s("p",[t._v("举例：")]),t._v(" "),s("h4",{attrs:{id:"接口变量可以储存任何实现了接口定义的所有方法的变量"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#接口变量可以储存任何实现了接口定义的所有方法的变量"}},[t._v("#")]),t._v(" 接口变量可以储存任何实现了接口定义的所有方法的变量")]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" r io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Reader\ntty"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":=")]),t._v(" os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("OpenFile")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"/test"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" os"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("O_RDWR"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" err "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!=")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("nil")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" err\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\nr "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" tty\n")])])]),s("p",[s("img",{attrs:{src:"/note/2019-06-21-14-47-33.png",alt:""}})]),t._v(" "),s("ol",[s("li",[t._v("声明r是io.Reader类型，是个interface（静态类型），它的动态类型是nil，动态值也是nil")]),t._v(" "),s("li",[t._v("定义一个tty，OpenFile返回的是个file的指针，*os.File")]),t._v(" "),s("li",[t._v("r = tty，将r的动态类型变成*os.File，动态值非空，r可以用"),s("code",[t._v("<value, type>")]),t._v("表示"),s("code",[t._v("<tty, *os.File>")])]),t._v(" "),s("li",[t._v("r的fun中指向的方法是Read，但是储存了tty变量之后，r还具有了io.Writer接口的方法，所以")])]),t._v(" "),s("div",{staticClass:"language-go extra-class"},[s("pre",{pre:!0,attrs:{class:"language-go"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" w io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writer\nw "),s("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" r"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("io"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("Writer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);a.default=e.exports}}]);